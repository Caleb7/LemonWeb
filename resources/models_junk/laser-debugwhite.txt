@name laser-debugwhite
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded]:number [Origin]:vector [Me Chip]:entity
@persist
@trigger

interval(25)

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Origin = Chip:pos()
    Loaded = 0
    HoloCounter = 0
    HologramModel = array("cylinder","models/props_combine/combine_barricade_bracket01b.mdl","models/props_combine/combine_barricade_bracket01b.mdl","models/props_combine/combine_barricade_bracket01b.mdl","models/props_combine/combine_barricade_bracket01b.mdl","cylinder","hq_sphere","models/props_combine/combine_mine01.mdl","models/gibs/scanner_gib01.mdl","models/gibs/scanner_gib01.mdl","models/items/combine_rifle_ammo01.mdl","models/items/combine_rifle_ammo01.mdl","hq_torus_thin","hq_torus_thin","hq_torus_thin","hq_torus_thin","hq_torus_thin","hq_torus_thin","models/holograms/hq_tube_thin.mdl")
    HologramPosition = array(vec(0,0,33.2001953125),vec(0,23,18),vec(0,-23,18),vec(23,0,18),vec(-23,0,18),vec(0,0,36.7998046875),vec(0,0,64.5),vec(0,0,32.25),vec(0,0,63.75),vec(0,0,60),vec(-0.75,0,63.5),vec(0,0,42.75),vec(36,0,63.5),vec(32.25,0,63.5),vec(28.5,0,63.5),vec(24.75,0,63.5),vec(39,0,63.5),vec(21.75,0,63.5),vec(14.111328125,0,63.349609375))
    HologramAngle = array(ang(0,0,0),ang(270,0,0),ang(270,180,0),ang(270,-90,0),ang(270,90,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,180),ang(90,0,0),ang(0,0,0),ang(90,0,0),ang(90,0,0),ang(90,0,0),ang(90,0,0),ang(90,0,0),ang(90,0,0),ang(90,0,0))
    HologramScale = array(vec(2.5,2.5,0.2),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(1,1,1),vec(0.8,0.8,1),vec(0.7,0.7,0.7),vec(2,2,2),vec(2,2,2),vec(1,4,1),vec(1,1.7,1),vec(0.9,0.9,0.9),vec(1.1,1.1,1.1),vec(1.3,1.3,1.3),vec(1.2,1.2,1.2),vec(0.7,0.7,0.7),vec(1,1,1),vec(0.7,0.7,2))
    HologramColor = array(vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat","debug/debugdrawflat")
    HologramSkin = array("1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1")
    HologramParent = array("0","1","1","1","1","1","12","1","7","7","7","1","7","7","7","7","7","7","7")
    timer("createHolos", 1)
}
elseif( clk("createHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count() & holoCanCreate())
    {
        HoloCounter++
        holoCreate( HoloCounter )
        holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
        holoScale(HoloCounter, HologramScale[HoloCounter, vector])
        holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
        holoColor(HoloCounter, HologramColor[HoloCounter, vector])
        holoModel( HoloCounter, HologramModel[HoloCounter, string] )
        holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
        holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
        holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
    }
    if(HoloCounter < HologramModel:count()) { timer("createHolos", 1) }
    else { timer("parentHolos", 1) HoloCounter = 0 }
}
elseif( clk("parentHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count())
    {
        HoloCounter++
        if(HologramParent[HoloCounter, number] > 0)
        {
            holoParent(HoloCounter, HologramParent[HoloCounter, number])
        }
    }
    if(HoloCounter == HologramModel:count()) { Loaded = 1 }
    else { timer("parentHolos", 1) }
}
elseif( clk() & Loaded == 1)
{
    
}
