# ----------------------------------------------------------------------------------------------------------------------------- #
# ____                                      __          __  __          ___                                                     #
#/\  _ `.                                  /\ \        /\ \/\ \        /\_ \                                                    #
#\ \ \/\ \  _ __    __     __      ___ ___ \ \/ ____   \ \ \_\ \    ___\//\ \     ___      __   _ __    __      ___ ___         #
# \ \ \ \ \/\`'__\/'__`\ /'__`\  /' __` __`\\/ /',__\   \ \  _  \  / __`\\ \ \   / __`\  /'_ `\/\`'__\/'__`\  /' __` __`\       #
#  \ \ \_\ \ \ \//\  __//\ \ \.\_/\ \/\ \/\ \ /\__, `\   \ \ \ \ \/\ \ \ \\_\ \_/\ \ \ \/\ \ \ \ \ \//\ \ \.\_/\ \/\ \/\ \      #
#   \ \____/\ \_\\ \____\ \__/.\_\ \_\ \_\ \_\\/\____/    \ \_\ \_\ \____//\____\ \____/\ \____ \ \_\\ \__/.\_\ \_\ \_\ \_\     #
#    \/___/  \/_/ \/____/\/__/\/_/\/_/\/_/\/_/ \/___/      \/_/\/_/\/___/ \/____/\/___/  \/___ \ \/_/ \/__/\/_/\/_/\/_/\/_/     #
#                                                                                          /\____/                              #
#                                                                                          \_/__/                               #
# ----------------------------------------------------------------------------------------------------------------------------- #
# Modeler Version: v5.1
# Date: 12/20/2018 @ 1618
# Holograms: 12
# Notes: 
# 1 -> anchor
# 2 ->  color
# 3 -> outline
# 4 -> outline
# 5 -> outline
# 6 -> eye anchor
# 9 -> eye
# 10 -> eye
# --------------------------------------------- #
@name lildude
@inputs 
@outputs 
@persist Hologram:table

##include "lib/dream"

if( first( ) ) {

    Hologram = table()
    Hologram[ "model", array ] = array("models/sprops/misc/cones/size_1/cone_12x12.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/sprops/misc/cones/size_1/cone_12x12.mdl","models/holograms/hq_torus_thin.mdl","models/holograms/cube.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_sphere.mdl","models/holograms/hq_torus.mdl","models/holograms/hq_torus.mdl")
    Hologram[ "position", array ] = array(vec(0,0,0),vec(0,0,19.123),vec(0,0,19.123),vec(0,0,0),vec(0,0,8.5664),vec(0,0,19.123),vec(5.7288,0.3931,22.0879),vec(4.6143,-3.2402,22.0498),vec(10.0566,0.1729,24.3701),vec(8.394,-5.3838,24.335),vec(8.3853,-5.8696,24.4014),vec(10.3051,0.6133,24.627))
    Hologram[ "angle", array ] = array(ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,-180,-180),ang(0,0,0),ang(-28.7,-15.4,-0.06),ang(-28.4081,-16.253,0.0996),ang(-28.4081,-16.253,0.0996),ang(-28.4081,-16.253,0.0996),ang(-28.4081,-16.253,0.0996),ang(61.4535,-15.4315,16.3328),ang(-61.1464,164.5688,-163.6626))
    Hologram[ "scale", array ] = array(vec(1.4,1.4,2),vec(2,2,2),vec(-2.0833,-2.0833,-2.0833),vec(-1.48,-1.48,-2.08),vec(1.03,1.03,1.03),vec(0.1,0.1,0.1),vec(1,1,1),vec(1,1,1),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.52,0.52,0.52),vec(0.54,0.54,0.54))
    Hologram[ "color", array ] = array(vec(0,255,255),vec(0,255,255),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(255,255,255),vec(0,0,0),vec(0,0,0),vec(0,255,255),vec(0,255,255),vec(0,0,0),vec(0,0,0))
    Hologram[ "alpha", array ] = array(255,255,255,255,255,255,255,255,255,255,255,255)
    Hologram[ "material", array ] = array("debug/debugdrawflat","","","","","","","","","","","")
    Hologram[ "skin", array ] = array(0,0,0,0,0,0,0,0,0,0,0,0)
    Hologram[ "parent", array ] = array(1,1,1,1,1,1,6,7,7,7,6,7)
    Hologram[ "note", array ] = array("anchor"," color","outline","outline","outline","eye anchor","","","eye","eye","","")

    function buffer( ) {
        local Next = Hologram[ "next", number ]
        for( I = Next, Next + clamp( holoRemainingSpawns( ), 0, Hologram[ "model", array ]:count( ) - Next ) ) {
            holoCreate(
                I,
                entity():toWorld(Hologram["position", array][I, vector]),
                Hologram["scale", array][I, vector],
                entity():toWorld(Hologram["angle", array][I, angle]),
                vec4(Hologram["color", array][I, vector],
                Hologram["alpha", array ][I,number]),
                Hologram["model", array][I, string]
            )
            holoMaterial(I, Hologram["material", array][I, string])
            Hologram[ "next", number ] = I
        }
        if( Next < Hologram[ "model", array ]:count( ) ) { timer( "buffer", 0.1 )
        } else { for( I = 1, Hologram[ "model", array ]:count( ) ) { holoParent(I, Hologram["parent", array][I, number]) }, interval( 100 ) }
    } buffer( )
}

if( clk( "buffer" ) ) { buffer( ) } elseif( clk( ) ) {
    interval( 60 )

}





