@name blimp01
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded]:number [Origin]:vector [Me Chip]:entity
@persist
@trigger

interval(25)

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Origin = Chip:pos()
    Loaded = 0

    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HoloCounter = 0
    HologramModel = array("models/holograms/hq_sphere.mdl","models/holograms/cylinder.mdl","models/holograms/cylinder.mdl","models/holograms/cylinder.mdl","models/holograms/cylinder.mdl","models/props_junk/plasticcrate01a.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl")
    HologramPosition = array(vec(0,1.7002,55.7),vec(6,-8.5,46),vec(-6,8.5,46),vec(-6,-8.5,46),vec(6,8.5,46),vec(0,0,39.9001),vec(0,-31.2998,52.8),vec(0,-31.2998,58.5),vec(0,-31.2998,55.6001))
    HologramAngle = array(ang(0,0,0),ang(-20,0,-11),ang(20,0,11),ang(20,0,-11),ang(-20,0,11),ang(0,0,0),ang(90,0,0),ang(90,0,0),ang(90,0,0))
    HologramScale = array(vec(2,7,2),vec(0.1,0.1,1),vec(0.1,0.1,1),vec(0.1,0.1,1),vec(0.1,0.1,1),vec(0.95,0.8,0.1),vec(1,1,0.01),vec(1,1,0.01),vec(0.01,1,1.4))
    HologramColor = array(vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("","","","","","","","","")
    HologramSkin = array(1,1,1,1,1,0,1,1,1)
    HologramParent = array(0,0,0,0,0,0,0,0,0)
    timer("createHolos", 1)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!

}
elseif( clk("createHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count() & holoCanCreate())
    {
        HoloCounter++
        holoCreate( HoloCounter )
        holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
        holoScale(HoloCounter, HologramScale[HoloCounter, vector])
        holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
        holoColor(HoloCounter, HologramColor[HoloCounter, vector])
        holoModel( HoloCounter, HologramModel[HoloCounter, string] )
        holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
        holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
        holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
    }
    if(HoloCounter < HologramModel:count()) { timer("createHolos", 1) }
    else { timer("parentHolos", 1) HoloCounter = 0 }
}
elseif( clk("parentHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count())
    {
        HoloCounter++
        if(HologramParent[HoloCounter, number] > 0)
        {
            holoParent(HoloCounter, HologramParent[HoloCounter, number])
        }
    }
    if(HoloCounter == HologramModel:count()) { Loaded = 1 }
    else { timer("parentHolos", 1) }
}
elseif( clk() & Loaded == 1)
{
    
}
