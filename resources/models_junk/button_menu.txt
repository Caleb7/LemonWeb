@name button_menu
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded Power Gravity ArcMode MovableHoloIndex_PitchYaw MovableHoloIndex_Pitch MovableHoloIndex_Yaw TargetCanHit]:number [Origin]:vector [Me Chip]:entity
@persist
@trigger

interval(25)

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Chip:setAlpha(0)
    Origin = Chip:pos()
    Loaded = 0
    Power = fromUnit("m/s", 12)
    Gravity = gravity()
    ArcMode = 1

    MovableHoloIndex_PitchYaw = 0
    MovableHoloIndex_Pitch = 0
    MovableHoloIndex_Yaw = 0
    
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HoloCounter = 0
    HologramModel = array("models/holograms/cplane.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/prism.mdl","models/holograms/prism.mdl","models/holograms/prism.mdl","models/holograms/prism.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/prism.mdl","models/holograms/prism.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/prism.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/prism.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/prism.mdl")
    HologramPosition = array(vec(0,0,0),vec(10.7,10.7,0),vec(10.7,10.7,0.2197),vec(10.7,10.6999,0.251),vec(10.7,10.6999,0.3018),vec(9.3003,12.1,0.3525),vec(15,0,0),vec(15,0,0.2197),vec(15,-0.0001,0.4004),vec(15,-0.0001,0.4004),vec(15,-3.0002,0.4004),vec(15,2.8,0.4004),vec(17.9993,0,0.4004),vec(12.0007,-0.0001,0.4004),vec(10.7,-10.7,0),vec(10.7,-10.7,0.2197),vec(10.7,-10.7,0.4004),vec(10.7,-10.7,0.501),vec(10.7,-7.6208,0.6973),vec(10.7,-13.8098,0.6973),vec(0,15,0),vec(0,15,0.2197),vec(0,14.9999,0.4004),vec(0,14.9999,0.4004),vec(-10.7,10.7,0),vec(-10.7,10.7,0.2197),vec(-10.7,10.6998,0.4004),vec(-10.7,10.6998,0.4004),vec(-15,0,0),vec(-15,0,0.0703),vec(-15,-0.1,0.1201),vec(-13.0835,1.8347,0.2617),vec(-10.7,-10.7,0),vec(-10.7,-10.7,0.2197),vec(-10.7,-11.15,0.2959),vec(-10.7,-8.0508,0.2988),vec(0,-15,0),vec(0,-15,0.2197),vec(0,-14.5002,0.2959),vec(0,-17.4995,0.2988))
    HologramAngle = array(ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,90,0),ang(0,0,90),ang(0,0,-90),ang(0,90,90),ang(0,90,-90),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,90,90),ang(0,90,-90),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,90,0),ang(0,0,0),ang(0,0,0),ang(0,45,0),ang(0,-45,0),ang(0,0,0),ang(0,0,0),ang(0,-45,0),ang(0,133,90),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,-90),ang(0,0,0),ang(0,0,0),ang(0,0,0),ang(0,0,90))
    HologramScale = array(vec(0.5,0.5,0.5),vec(0.72,0.72,0.01),vec(0.7,0.7,0.01),vec(0.45,0.45,0.01),vec(0.4,0.4,0.01),vec(0.2,0.2,0.01),vec(0.72,0.72,0.01),vec(0.7,0.7,0.01),vec(0.08,0.4,0.01),vec(0.08,0.4,0.01),vec(0.15,0.01,0.12),vec(0.15,0.01,0.12),vec(0.15,0.01,0.12),vec(0.15,0.01,0.12),vec(0.72,0.72,0.01),vec(0.7,0.7,0.01),vec(0.55,0.55,0.01),vec(0.5,0.5,0.01),vec(0.08,0.01,0.08),vec(0.08,0.01,0.08),vec(0.72,0.72,0.01),vec(0.7,0.7,0.01),vec(0.08,0.45,0.01),vec(0.08,0.45,0.01),vec(0.72,0.72,0.01),vec(0.7,0.7,0.01),vec(0.08,0.45,0.01),vec(0.08,0.45,0.01),vec(0.72,0.72,0.01),vec(0.7,0.7,0.01),vec(0.08,0.4,0.01),vec(0.15,0.01,0.15),vec(0.72,0.72,0.01),vec(0.7,0.7,0.01),vec(0.08,0.4,0.01),vec(0.12,0.01,0.12),vec(0.72,0.72,0.01),vec(0.7,0.7,0.01),vec(0.08,0.4,0.01),vec(0.12,0.01,0.12))
    HologramColor = array(vec(255,255,255),vec(0,0,0),vec(255,255,255),vec(0,0,0),vec(255,255,255),vec(0,0,0),vec(0,0,0),vec(255,255,255),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(255,255,255),vec(0,0,0),vec(255,255,255),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(255,255,255),vec(0,255,0),vec(0,255,0),vec(0,0,0),vec(255,255,255),vec(255,0,0),vec(255,0,0),vec(0,0,0),vec(255,255,255),vec(0,0,0),vec(0,0,0),vec(0,0,0),vec(255,255,255),vec(255,0,0),vec(255,0,0),vec(0,0,0),vec(255,255,255),vec(0,255,0),vec(0,255,0))
    HologramAlpha = array(100,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","")
    HologramSkin = array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    HologramParent = array(0,1,2,2,2,2,1,7,7,7,7,7,7,7,1,15,15,15,15,15,1,21,21,21,1,25,25,25,1,29,29,29,1,33,33,33,1,37,37,37)
    timer("createHolos", 1)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    
    function angle incrementedAngle(O:angle, T:angle, S:number)
    {
        CV=O:forward()
        DV=T:forward()
        Ang=acos(CV:dot(DV))
        if(Ang>S)
        {
            TargetCanHit = 0
            return slerp(quat(O),quat(T),S/Ang):toAngle()
        }
        else
        {
            TargetCanHit = 1
            return T
        }
    }
    
    function angle getAngleOfAttack(O:vector, T:vector)
    {
        local VTar = T #+ ( Target:vel() * ( T:setZ(0):distance(O:setZ(0)) / ( Power * cos(holoEntity(8):angles():pitch()))))
        local V = VTar - O
        local Range = V:setZ(0):length()
        local Height = V:z()
        local Angle = atan(((Power^2) + ArcMode*sqrt((Power^4) - Gravity * ((Gravity*(Range^2)) + (2*Height*(Power^2)))))/(Gravity*Range))
        local Time = (Power * sin(Angle) + sqrt((Power * sin(Angle))^2 + (2 * Gravity * Height))) / Gravity
        Timer = Time
        if( Time > 0 & abs(O:z() - T:z()) < 100) { return V:toAngle():setPitch(90-Angle) }
        else { return ang(0,0,0) }
    }
}
elseif( clk("createHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count() & holoCanCreate())
    {
        HoloCounter++
        holoCreate( HoloCounter )
        holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
        holoScale(HoloCounter, HologramScale[HoloCounter, vector])
        holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
        holoColor(HoloCounter, HologramColor[HoloCounter, vector])
        holoModel( HoloCounter, HologramModel[HoloCounter, string] )
        holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
        holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
        holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
    }
    if(HoloCounter < HologramModel:count()) { timer("createHolos", 1) }
    else { timer("parentHolos", 1) HoloCounter = 0 }
}
elseif( clk("parentHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count())
    {
        HoloCounter++
        if(HologramParent[HoloCounter, number] > 0)
        {
            holoParent(HoloCounter, HologramParent[HoloCounter, number])
        }
    }
    if(HoloCounter == HologramModel:count()) { Loaded = 1 }
    else { timer("parentHolos", 1) }
}
elseif( clk() & Loaded == 1)
{
    if( Me:keyAttack2() && changed( Me:keyAttack2() ) )
    {
        Origin = owner():shootPos()
        OriginDirVec = owner():eye()
        holoPos(1, Origin + (OriginDirVec:toAngle():forward() * 90))
        holoAng(1, OriginDirVec:toAngle() + ang(-90,0,0) )
    }
}
