@name tank0
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded Power Gravity ArcMode MovableHoloIndex_PitchYaw MovableHoloIndex_Pitch MovableHoloIndex_Yaw TargetCanHit]:number [Origin]:vector [Me Chip]:entity
@persist
@trigger

interval(25)

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Chip:setAlpha(0)
    Origin = Chip:pos()
    Loaded = 0
    Power = fromUnit("m/s", 12)
    Gravity = gravity()
    ArcMode = 1

    MovableHoloIndex_PitchYaw = 0
    MovableHoloIndex_Pitch = 0
    MovableHoloIndex_Yaw = 0
    
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HoloCounter = 0
    HologramModel = array("models/holograms/cube.mdl","models/holograms/cube.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/mechanics/gears2/gear_36t3.mdl","models/holograms/cube.mdl")
    HologramPosition = array(vec(0,0,0),vec(0,0,11.2109),vec(25.0015,-20.7997,11.6113),vec(23.6602,-20.7997,11.6113),vec(22.3389,-20.7997,11.6113),vec(20.9876,-20.7997,11.6113),vec(19.6463,-20.7997,11.6113),vec(18.305,-20.7997,11.6113),vec(16.9236,-20.7997,11.6113),vec(15.5923,-20.7997,11.6113),vec(14.221,-20.7997,11.6113),vec(12.8297,-20.7997,11.6113),vec(11.4483,-20.7997,11.6113),vec(10.137,-20.7997,11.6113),vec(8.8257,-20.7997,11.6113),vec(7.5545,-20.7997,11.6113),vec(6.2332,-20.7997,11.6113),vec(4.9319,-20.7997,11.6113),vec(3.6107,-20.7997,11.6113),vec(2.2994,-20.7997,11.6113),vec(1.0081,-20.7997,11.6113),vec(-0.2231,-20.7997,11.6113),vec(-1.5444,-20.7997,11.6113),vec(-2.8456,-20.7997,11.6113),vec(-4.1469,-20.7997,11.6113),vec(-5.4282,-20.7997,11.6113),vec(-6.6894,-20.7997,11.6113),vec(-7.9506,-20.7997,11.6113),vec(-9.2619,-20.7997,11.6113),vec(-10.5532,-20.7997,11.6113),vec(-11.8344,-20.7997,11.6113),vec(-13.1157,-20.7997,11.6113),vec(-14.4069,-20.7997,11.6113),vec(-15.6982,-20.7997,11.6113),vec(-17.0595,-20.7997,11.6113),vec(-18.3608,-20.7997,11.6113),vec(-19.642,-20.7997,11.6113),vec(-20.9133,-20.7997,11.6113),vec(-22.2346,-20.7997,11.6113),vec(-23.4758,-20.7997,11.6113),vec(23.9805,-20.7997,10.791),vec(23.1197,-20.7997,9.8926),vec(22.0687,-20.7997,9.043),vec(21.0176,-20.7997,8.1934),vec(19.9466,-20.7997,7.3926),vec(18.6253,-20.7997,7.3926),vec(17.3741,-20.7997,7.3926),vec(16.0928,-20.7997,7.3926),vec(14.7315,-20.7997,7.3926),vec(0,0,36.3779))
    HologramAngle = array(ang(0,0,0),ang(0,0,0),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,0))
    HologramScale = array(vec(0.1,0.1,0.1),vec(4,3,1),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(0.2,0.2,0.2),vec(1,1,1))
    HologramColor = array(vec(0,0,0),vec(90,90,90),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","")
    HologramSkin = array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    HologramParent = array(0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    timer("createHolos", 1)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    
    function angle incrementedAngle(O:angle, T:angle, S:number)
    {
        CV=O:forward()
        DV=T:forward()
        Ang=acos(CV:dot(DV))
        if(Ang>S)
        {
            TargetCanHit = 0
            return slerp(quat(O),quat(T),S/Ang):toAngle()
        }
        else
        {
            TargetCanHit = 1
            return T
        }
    }
    
    function angle getAngleOfAttack(O:vector, T:vector)
    {
        local VTar = T #+ ( Target:vel() * ( T:setZ(0):distance(O:setZ(0)) / ( Power * cos(holoEntity(8):angles():pitch()))))
        local V = VTar - O
        local Range = V:setZ(0):length()
        local Height = V:z()
        local Angle = atan(((Power^2) + ArcMode*sqrt((Power^4) - Gravity * ((Gravity*(Range^2)) + (2*Height*(Power^2)))))/(Gravity*Range))
        local Time = (Power * sin(Angle) + sqrt((Power * sin(Angle))^2 + (2 * Gravity * Height))) / Gravity
        Timer = Time
        if( Time > 0 & abs(O:z() - T:z()) < 100) { return V:toAngle():setPitch(90-Angle) }
        else { return ang(0,0,0) }
    }
}
elseif( clk("createHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count() & holoCanCreate())
    {
        HoloCounter++
        holoCreate( HoloCounter )
        holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
        holoScale(HoloCounter, HologramScale[HoloCounter, vector])
        holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
        holoColor(HoloCounter, HologramColor[HoloCounter, vector])
        holoModel( HoloCounter, HologramModel[HoloCounter, string] )
        holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
        holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
        holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
    }
    if(HoloCounter < HologramModel:count()) { timer("createHolos", 1) }
    else { timer("parentHolos", 1) HoloCounter = 0 }
}
elseif( clk("parentHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count())
    {
        HoloCounter++
        if(HologramParent[HoloCounter, number] > 0)
        {
            holoParent(HoloCounter, HologramParent[HoloCounter, number])
        }
    }
    if(HoloCounter == HologramModel:count()) { Loaded = 1 }
    else { timer("parentHolos", 1) }
}
elseif( clk() & Loaded == 1)
{
    TargetV = owner():pos()
    AimV = TargetV - holoEntity(MovableHoloIndex_PitchYaw):pos()
    AimA = incrementedAngle( holoEntity(MovableHoloIndex_PitchYaw):angles(), AimV:toAngle(), 2 )
    
    if( MovableHoloIndex_PitchYaw > 0 )
    {
        holoAng( MovableHoloIndex_PitchYaw, (AimA * ang(1,1,0)))
    }
    if( MovableHoloIndex_Pitch > 0)
    {
        holoAng( MovableHoloIndex_Pitch, (AimA * ang(1,0,0)))
    }
    if( MovableHoloIndex_Yaw > 0)
    {
        holoAng( MovableHoloIndex_Yaw, (AimA * ang(0,1,0)))
    }
}
