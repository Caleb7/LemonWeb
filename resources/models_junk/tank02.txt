@name tank02
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded]:number [Origin]:vector [Me Chip]:entity
@persist

#include "lib/async"

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Origin = Chip:pos()
    Loaded = 0
    HoloCounter = 0
    
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HologramModel = array("models/holograms/cube.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl","models/mechanics/gears2/gear_12t3.mdl")
    HologramPosition = array(vec(0.0001,0,3),vec(-4.9999,5,1),vec(-3.9999,5,1),vec(-2.9999,5,1),vec(-1.9999,5,1),vec(-0.9999,5,1),vec(0.0001,5,1),vec(1.0001,5,1),vec(2.0001,5,1),vec(3.0001,5,1),vec(4.0001,5,1),vec(5.0001,5,1),vec(-5.9999,5,1),vec(-4.9999,-5,1),vec(-3.9999,-5,1),vec(-2.9999,-5,1),vec(-1.9999,-5,1),vec(-0.9999,-5,1),vec(0.0001,-5,1),vec(1.0001,-5,1),vec(2.0001,-5,1),vec(3.0001,-5,1),vec(4.0001,-5,1),vec(5.0001,-5,1),vec(-5.9999,-5,1))
    HologramAngle = array(ang(0,0,0),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90),ang(0,0,90))
    HologramScale = array(vec(1,0.63,0.3),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1),vec(0.1,0.1,0.1))
    HologramColor = array(vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50),vec(50,100,50))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("","","","","","","","","","","","","","","","","","","","","","","","","")
    HologramSkin = array(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
    HologramParent = array(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!

    function modelParent() {
        while( perf() ) { HoloCounter++, if(HologramParent[HoloCounter, number] > 0) { holoParent(HoloCounter, HologramParent[HoloCounter, number]) } }
        if( HoloCounter < HologramModel:count() ) { async( 0.1, "modelParent" ) }
        else { holoParent( 1, entity() ), runOnTick(1) }
    }
    
    function modelSpawn( ) {
        while( perf() && holoCanCreate() && HoloCounter < HologramModel:count()) {
            HoloCounter++
            holoCreate( HoloCounter )
            holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
            holoScale(HoloCounter, HologramScale[HoloCounter, vector])
            holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
            holoColor(HoloCounter, HologramColor[HoloCounter, vector])
            holoModel( HoloCounter, HologramModel[HoloCounter, string] )
            holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
            holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
            holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
        }
        if( HoloCounter < HologramModel:count() ) { async( 1, "modelSpawn" ) }
        else { HoloCounter = 0, modelParent() }
    }
    modelSpawn()
}
