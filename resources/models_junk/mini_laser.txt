@name mini_laser
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded]:number [Origin]:vector [Me Chip]:entity
@persist

#include "lib/async"

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Origin = Chip:pos()
    Loaded = 0
    HoloCounter = 0
    
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HologramModel = array("models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_torus.mdl","models/holograms/hq_torus.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_cone.mdl","models/holograms/hq_hdome_thin.mdl","models/holograms/hq_hdome_thin.mdl","models/holograms/hq_hdome_thin.mdl","models/holograms/hq_hdome_thin.mdl","models/holograms/hq_hdome_thin.mdl","models/items/combine_rifle_ammo01.mdl","models/items/combine_rifle_ammo01.mdl","models/holograms/hq_torus_thick.mdl")
    HologramPosition = array(vec(0,0,50),vec(0,0,50),vec(0,-1.6103,50.752),vec(0,1.6103,50.752),vec(0,-2.3649,52.5781),vec(0,2.3649,52.5781),vec(0,0,53.7793),vec(0,0,53.7793),vec(0,-2.2,53.7793),vec(0,2.2,53.7793),vec(0,0,53.7793),vec(3.4,0,53.7793),vec(3.2,0,53.7793),vec(3.92,0,53.7793),vec(4.45,0,53.7793),vec(4.99,0,53.7793),vec(5.3501,0,53.7793),vec(-0.22,0,53.7793),vec(-3.5301,0,53.7793),vec(-2.4601,0,53.7793))
    HologramAngle = array(ang(0,0,0),ang(0,0,0),ang(-45,90,0),ang(45,90,0),ang(0,90,0),ang(0,90,0),ang(0,0,0),ang(90,0,0),ang(90,90,0),ang(90,90,0),ang(90,90,0),ang(90,0,0),ang(-90,0,0),ang(-90,0,0),ang(-90,0,0),ang(-90,0,0),ang(-90,0,0),ang(90,0,0),ang(90,0,0),ang(90,0,0))
    HologramScale = array(vec(0.05,0.05,0.05),vec(0.2,0.2,0.1),vec(0.05,0.1,0.2),vec(0.05,0.1,0.2),vec(0.05,0.1,0.2),vec(0.05,0.1,0.2),vec(0.05,0.05,0.05),vec(0.25,0.25,0.4),vec(0.075,0.075,0.2),vec(0.075,0.075,0.2),vec(0.057,0.057,0.35),vec(0.2,0.2,0.5),vec(0.35,0.35,0.2),vec(0.27,0.27,0.175),vec(0.2,0.2,0.15),vec(0.15,0.15,0.1),vec(0.1,0.1,0.05),vec(0.2,0.2,0.5),vec(0.5,0.5,0.6),vec(0.275,0.275,0.275))
    HologramColor = array(vec(255,255,255),vec(0,0,0),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(255,255,255),vec(90,90,90),vec(90,90,90),vec(255,255,255))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","sprops/textures/sprops_metal5","")
    HologramSkin = array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    HologramParent = array(0,1,2,2,2,2,1,7,2,2,2,7,7,7,7,7,7,7,7,7)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!

    function modelParent() {
        while( perf() ) { HoloCounter++, if(HologramParent[HoloCounter, number] > 0) { holoParent(HoloCounter, HologramParent[HoloCounter, number]) } }
        if( HoloCounter < HologramModel:count() ) { async( 0.1, "modelParent" ) }
        else { holoParent( 1, entity() ), runOnTick(1) }
    }
    
    function modelSpawn( ) {
        while( perf() && holoCanCreate() && HoloCounter < HologramModel:count()) {
            HoloCounter++
            holoCreate( HoloCounter )
            holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
            holoScale(HoloCounter, HologramScale[HoloCounter, vector])
            holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
            holoColor(HoloCounter, HologramColor[HoloCounter, vector])
            holoModel( HoloCounter, HologramModel[HoloCounter, string] )
            holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
            holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
            holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
        }
        if( HoloCounter < HologramModel:count() ) { async( 1, "modelSpawn" ) }
        else { HoloCounter = 0, modelParent() }
    }
    modelSpawn()
}
