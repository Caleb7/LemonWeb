@name imuffin-turret
@inputs
@outputs
@persist [HologramName HologramModel HologramPosition HologramPositionWorld HologramSkin HologramAngle HologramScale HologramColor HologramAlpha HologramMaterial HologramParent]:array
@persist [HoloCounter Loaded]:number [Origin]:vector [Me Chip]:entity
@persist
@trigger

interval(25)

if( first() | dupefinished() )
{
    Me = owner()
    Chip = entity()
    Origin = Chip:pos()
    Loaded = 0

    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!
    HoloCounter = 0
    HologramModel = array("models/holograms/hq_cylinder.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/hq_cylinder.mdl","models/holograms/hq_tube_thick.mdl","models/holograms/cube.mdl","models/props_combine/breenlight.mdl","models/holograms/hq_cylinder.mdl","models/holograms/rcube_thick.mdl","models/holograms/hq_tube_thin.mdl","models/holograms/hq_tube.mdl","models/holograms/cube.mdl","models/mechanics/roboticslarge/xfoot.mdl","models/mechanics/roboticslarge/xfoot.mdl","models/mechanics/roboticslarge/xfoot.mdl","models/mechanics/roboticslarge/xfoot.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl","models/holograms/cube.mdl")
    HologramPosition = array(vec(0,-0.0001,24.2355),vec(27.6016,-27.8018,25.9933),vec(27.6016,27.8018,25.9933),vec(-27.6021,-27.8018,25.9933),vec(-27.6021,27.8018,25.9933),vec(0,-0.0001,27.1877),vec(0,-0.0001,32.716),vec(0,-0.0001,32.716),vec(0,-0.0001,39.9631),vec(0,-0.0001,32.716),vec(-30.0425,-0.0001,47.0597),vec(11.0972,-0.0001,52.7374),vec(46.7959,-0.0001,52.7374),vec(27.6016,-27.8018,25.9933),vec(44,-44.0001,22.3957),vec(-44,-44.0001,22.3957),vec(44,43.9999,22.3957),vec(-44,43.9999,22.3957),vec(-27.6021,-27.8018,25.9933),vec(-27.6021,27.8018,25.9933),vec(27.6016,27.8018,25.9933))
    HologramAngle = array(ang(0,0,0),ang(0,45,0),ang(0,-45,0),ang(0,-45,0),ang(0,-135,0),ang(0,0,0),ang(90,90,0),ang(0,0,0),ang(90,180,0),ang(90,90,0),ang(0,0,0),ang(90,0,0),ang(90,0,0),ang(90,45,0),ang(0,-45,0),ang(0,-130,0),ang(0,50,0),ang(0,130,0),ang(90,-45,0),ang(90,45,0),ang(90,-45,0))
    HologramScale = array(vec(3,3,0.5),vec(0.5,4,0.2),vec(0.5,4,0.2),vec(0.5,4,0.2),vec(0.5,4,0.2),vec(2.5,2.5,0.1),vec(1,1,1),vec(0.1,0.1,0.1),vec(2,4,4),vec(0.5,0.5,1),vec(2,2,2.5),vec(0.7,0.7,7),vec(0.87,0.87,1),vec(0.5,4,0.2),vec(0.3,0.3,0.3),vec(0.3,0.3,0.3),vec(0.3,0.3,0.3),vec(0.3,0.3,0.3),vec(0.5,4,0.2),vec(0.5,4,0.2),vec(0.5,4,0.2))
    HologramColor = array(vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(100,100,100),vec(90,90,90),vec(110,110,110),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90),vec(90,90,90))
    HologramAlpha = array(255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255)
    HologramMaterial = array("","","","","","","","","","","","","","","","","","","","","")
    HologramSkin = array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    HologramParent = array(0,1,1,1,1,1,6,6,8,8,8,8,8,1,1,1,1,1,1,1,1)
    timer("createHolos", 1)
    # DO NOT EDIT THIS SECTION UNLESS YOU KNOW WHAT YOU ARE DOING, OR IT MAY NOT PARSE IN MODELER CORRECTLY!

}
elseif( clk("createHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count() & holoCanCreate())
    {
        HoloCounter++
        holoCreate( HoloCounter )
        holoPos(HoloCounter, Origin + HologramPosition[HoloCounter, vector])
        holoScale(HoloCounter, HologramScale[HoloCounter, vector])
        holoAng(HoloCounter, HologramAngle[HoloCounter, angle])
        holoColor(HoloCounter, HologramColor[HoloCounter, vector])
        holoModel( HoloCounter, HologramModel[HoloCounter, string] )
        holoMaterial( HoloCounter, HologramMaterial[HoloCounter, string] )
        holoSkin( HoloCounter, HologramSkin[HoloCounter, number] )
        holoAlpha( HoloCounter, HologramAlpha[HoloCounter, number] )
    }
    if(HoloCounter < HologramModel:count()) { timer("createHolos", 1) }
    else { timer("parentHolos", 1) HoloCounter = 0 }
}
elseif( clk("parentHolos") )
{
    while(perf(90) & HoloCounter < HologramModel:count())
    {
        HoloCounter++
        if(HologramParent[HoloCounter, number] > 0)
        {
            holoParent(HoloCounter, HologramParent[HoloCounter, number])
        }
    }
    if(HoloCounter == HologramModel:count()) { Loaded = 1 }
    else { timer("parentHolos", 1) }
}
elseif( clk() & Loaded == 1)
{
    
}
